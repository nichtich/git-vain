#!/bin/bash
set -uo pipefail

usage() {
    echo "Usage: git-vain [-a] [-v] [-q] [-h]"
    echo
    echo "Check whether a git repository can be deleted."
    echo
    echo "Options:"
    echo "-a    automatically run some cleanup"
    echo "-v    be more verbose"
    echo "-q    early quit"
    echo "-l    local checks only (no remote, no backup!)"
    echo "-h    show this help"
    exit
}

Action=
Verbose=
Local=
Quit=

while getopts "havlq" opt; do
    case "$opt" in
        h) usage ;;
        a) Action=1 ;;
        v) Verbose=1 ;;           
        l) Local=1 ;;
        q) Quit=1 ;;
    esac
done

green="\033[0;32m"
bold_green="\033[1;32m"
cyan="\033[0;36m"
bold_cyan="\033[1;36m"
red="\033[0;31m"
bold_red="\033[1;31m"
no_color="\033[0m"

Dirty=0

result() {
    if [ $? -eq 0 ]; then
        printf "${bold_cyan}✓${no_color} $1\n"
        return 0
    else
        printf "${bold_red}✘${no_color} $2\n"
        Dirty=$((Dirty + 1))
        [[ -z $Verbose || -z "${3:-}" ]] || eval "$3"
        [[ -z $Quit ]] || exit 1
        return 1
    fi
}


# check whether this is the root of a git repository
[ -d .git ] && git status > /dev/null 2> /dev/null
result "$(pwd) is root of a git repository" "$(pwd) is not root of a git repository" || exit 1

# check whether untracked files exist
[ `git ls-files --others --exclude-standard | wc -l` -eq 0 ]
result "no untracked files" "untracked files" "git ls-files --others --exclude-standard"

# check whether unstaged changes exist
[ "$(git diff --shortstat 2> /dev/null)" == "" -a "$(git diff --staged --shortstat 2> /dev/null)" == "" ]
result "no unstaged diffs" "diffs to commit" "git --no-pager diff"

# count number of stashed states
stash=`expr $(git stash list 2>/dev/null| wc -l)`
[ "$stash" == "0" ]
result "no pending stashes" "stashes pending"
if [[ $? -eq 1 && $Verbose -eq 1 ]]; then
    if [ $stash -eq 1 ]; then
        git --no-pager stash show -p
    elif [ $stash != 0 ]; then
        git stash list
    fi
fi

# check whether repository has a detached head
detached=`grep -v "^ref" "$(git rev-parse --show-toplevel)/.git/HEAD" | wc -l`
[ $detached -eq 0 ]
result "head attached" "detached head"
if [[ $? -eq 1 && $Action -eq 1 ]]; then
    if [[ `git branch --list main` ]]; then
        echo -n "Merge detached head into main? [y/n]"
        read yesno
        if [ "$yesno" != "n" -a "$yesno" != 'N' ]; then
            git checkout -b HEADtmp
            git commit -m "Check in HEAD to merge"
            git checkout main
            git merge HEADtmp
            git branch -d HEADtmp
         fi
    else
        printf "${bold_red}✘${no_color} main branch does not exist\n"
    fi
fi

# local branches unmerged into the current branch
current=`git branch --show-current`
unmerged=`git branch --no-color --no-merged`

for branch in $current $unmerged; do
    upstream=$(git rev-parse --abbrev-ref $branch@{upstream} 2>/dev/null)
    result "$branch tracks $upstream" "$branch is not tracked"
    if [[ $? -eq 0 ]]; then
        ahead=$(git rev-list --left-right --count $branch...$upstream | awk '{print $1}')
        [ $ahead -eq 0 ]
        result "$branch is in sync with $upstream" "$branch is $ahead commits ahead $upstream"
        if [[ $? -eq 1 && $Action -eq 1 ]]; then
            echo -n "Run git push origin $branch? [y/n] "
            read yesno
            if [ "$yesno" != "n" -a "$yesno" != 'N' ]; then
                git push origin $branch
            fi
        fi

    fi
done


if [ -z $Local ]; then
    # check whether unpushed tags exist
    unpushed_tags=`git show-ref --tags | grep -v -F "$(git ls-remote --tags origin | grep -v '\^{}' | cut -f 2)" | sed 's#.*tags/##'`
    [ -z "$unpushed_tags" ]
    result "no unpushed tags" "unpushed tags: $unpushed_tags"
    if [[ $? == 1 && $Action == 1 ]]; then
        echo -n "Push all tags? [y/n] "
        read yesno
        if [ "$yesno" != "n" -a "$yesno" != 'N' ]; then
             git push --tags
        fi
    fi
fi

# run this very program foreach submodule
if [ -e "`git rev-parse --show-toplevel`/.gitmodules" ] ; then
    echo "Submodules are not checked yet!"
    # TODO: 
    #echo -e "${Divider}Checking submodules"
    #if [ $Action = 0 ] ; then
    #    git submodule foreach "$0 -a"
    #else
    #    git submodule foreach "$0"
    #fi
    #Subdirty=$?
    #Dirty=$((Dirty + $Subdirty))
fi

# OK, checks done. Check to remove working directory
if [[ $Dirty -eq 0 && $Action -eq 1 ]]; then
    dir=$(basename $(pwd))
    echo -n "Everything looks fine. Remove working directory $dir? [y/n] "
    read yesno
    if [ "$yesno" != "n" -a "$yesno" != 'N' ]; then
        cd ".."
        rm -rf "$dir"
        # TODO: manually cd ..
    fi
fi

exit $Dirty
